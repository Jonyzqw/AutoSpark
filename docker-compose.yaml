version: '3.8'
services:
  backend:
    volumes:
      - "./:/app"
      - type: bind
        source: ./config.yaml   #这个是宿主机的地址
        target: /app/config.yaml  #这个是容器里配置文件的地址
    build: .
    depends_on:
      - as__redis
      - as__postgres
    networks:
      - as_network
    ports:
      - "8001:8001"
    environment:
      - SPARK_DOMAIN=${SPARK_DOMAIN}
      - SPARK_API_BASE=${SPARK_API_BASE}
  celery:
    volumes:
      - "./:/app"
      - "${EXTERNAL_RESOURCE_DIR:-./workspace}:/app/ext"
      - type: bind
        source: ./config.yaml   #这个是宿主机的地址
        target: /app/config.yaml  #这个是容器里配置文件的地址
    build:
      context: .
      dockerfile: DockerfileCelery
    depends_on:
      - as__redis
      - as__postgres
    networks:
      - as_network
    environment:
      - SPARK_DOMAIN=${SPARK_DOMAIN}
      - SPARK_API_BASE=${SPARK_API_BASE}
  gui:
    build:
      context: ./gui
      dockerfile: DockerfileProd
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_BASE_URL=/api
        - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
    environment:
      - NEXT_PUBLIC_API_BASE_URL=/api
        - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
    networks:
      - as_network
#    volumes:
#      - ./gui:/app
#      - /app/node_modules/
#      - /app/.next/
  as__redis:
    image: "redis/redis-stack-server:latest"
    networks:
      - as_network
#    uncomment to expose redis port to host
#    ports:
#      - "6379:6379"
    volumes:
      - redis_data:/data

  as__postgres:
    image: "docker.io/library/postgres:latest"
    environment:
      - POSTGRES_USER=autospark
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=as_main
    volumes:
      - as_postgres_data:/var/lib/postgresql/data/
    networks:
      - as_network
#    uncomment to expose postgres port to host
    ports:
      - "15432:5432"

  proxy:
    image: nginx:stable-alpine
    ports:
      - "3001:80"
    networks:
      - as_network
    depends_on:
      - backend
      - gui
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf

networks:
  as_network:
    driver: bridge
volumes:
  as_postgres_data:
  redis_data: